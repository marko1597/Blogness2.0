@using System.Configuration
@using System.Text
@using ServiceStack.Redis
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bloggity Administration Tool</title>
    <link rel="icon" href="~/favicon.ico" />

    <!-- #region bootstrap css -->
    <link href="~/bower_components/bootstrap/dist/css/bootstrap.css" rel="stylesheet" />
    <link href="~/wwwroot/css/blog-bootstrap.css" rel="stylesheet" />

    @if (UseMaterialDesign())
    {
        <link href="~/bower_components/bootstrap-material-design/dist/css/material.css" rel="stylesheet" />
    }
    else
    {
        <link href="~/wwwroot/css/blog-bootstrap.css" rel="stylesheet" />
    }

    <link href="~/bower_components/bootstrap-material-design/dist/css/ripples.css" rel="stylesheet" />
    <link href="~/wwwroot/css/font.css" rel="stylesheet" />
    <link href="~/wwwroot/css/site.css" rel="stylesheet" />
    <!-- #endregion -->
    <!-- #region css plugins -->
    <link href="~/bower_components/bootstrap-datepicker/css/datepicker.css" rel="stylesheet" />
    <!-- #endregion -->
    <!-- #region modules css -->
    <link href="~/wwwroot/css/modules/error.css" rel="stylesheet" />
    <link href="~/wwwroot/css/modules/login.css" rel="stylesheet" />
    <link href="~/wwwroot/css/modules/hobbies.css" rel="stylesheet" />
    <link href="~/wwwroot/css/modules/notificationmessage.css" rel="stylesheet" />
    <link href="~/wwwroot/css/modules/notifications.css" rel="stylesheet" />
    <link href="~/wwwroot/css/modules/userdetails.css" rel="stylesheet" />
    <link href="~/wwwroot/css/modules/profileimage.css" rel="stylesheet" />
    <!-- #endregion -->
    <!-- #region jquery and knockout js -->
    <script src="~/bower_components/modernizr/modernizr.js"></script>
    <script src="~/bower_components/knockout/dist/knockout.js"></script>
    <script src="~/bower_components/jquery/dist/jquery.js"></script>
    <!-- #endregion -->
</head>
<body>
    <!-- #region header navigation bar -->
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a href="@Url.Action("Index", "Home", new { area = "" })" class="navbar-brand">
                    <span class="blog-brand-icon"></span>
                    Bloggity
                </a>
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li class="visible-xs">@Html.ActionLink("Home", "Index", "Home")</li>
                    <li class="visible-xs">@Html.ActionLink("About", "About", "Home")</li>
                    <li class="visible-xs">@Html.ActionLink("Contact", "Contact", "Home")</li>
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">User Manager <span class="caret"></span></a>
                        <ul class="dropdown-menu" role="menu">
                            <li>@Html.ActionLink("Roles", "Index", "UserRole")</li>
                            <li>@Html.ActionLink("Users", "Index", "Users")</li>
                            <li>@Html.ActionLink("Identity", "Index", "Identity")</li>
                        </ul>
                    </li>
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">Message Notifications <span class="caret"></span></a>
                        <ul class="dropdown-menu" role="menu">
                            <li>@Html.ActionLink("Notifications", "Index", "Notifications")</li>
                        </ul>
                    </li>
                </ul>
                @Html.Partial("_LoginPartial")
            </div>
        </div>
    </div>
    <!-- #endregion -->

    <div class="container body-content">
        @RenderBody()
    </div>

    <!-- #region footer -->
    <div class="footer">
        <div class="container">
            <p>
                &copy; Bloggity Administration Tool
                @Html.ActionLink("About", "About", "Home", null, new { @class = "hidden-xs" })
                @Html.ActionLink("Contact", "Contact", "Home", null, new { @class = "hidden-xs" })

                <span id="footer-time" class="label label-primary hidden-xs pull-right">@DateTime.Now</span>
            </p>

            <script>
                $(function () {
                    setInterval(function () {
                        var dateNow = moment().format('MMMM Do YYYY, h:mm:ss a');
                        $("#footer-time").text(dateNow);
                    }, 1000);
                });
            </script>
        </div>
    </div>
    <!-- #endregion -->
    <!-- #region site configuration objects -->
    <script>
        var configuration =
        {
            blogSockets: "@GetBlogSockets()",
            blogSocketsAvailable: ("@CheckBlogSocketsAvailability()").toLowerCase()
        };

        var socketClientFunctions = {
            publishMessage: "@Blog.Common.Utils.Constants.SocketClientFunctions.PublishMessage.ToString()",
            commentAdded: "@Blog.Common.Utils.Constants.SocketClientFunctions.CommentAdded.ToString()",
            commentLikesUpdate: "@Blog.Common.Utils.Constants.SocketClientFunctions.CommentLikesUpdate.ToString()",
            postLikesUpdate: "@Blog.Common.Utils.Constants.SocketClientFunctions.PostLikesUpdate.ToString()",
            subscribeViewPost: "@Blog.Common.Utils.Constants.SocketClientFunctions.SubscribeViewPost.ToString()",
            unsubscribeViewPost: "@Blog.Common.Utils.Constants.SocketClientFunctions.UnsubscribeViewPost.ToString()",
            wsConnect: "@Blog.Common.Utils.Constants.SocketClientFunctions.WsConnected.ToString()"
        };

        $(function () {
            $('.datepicker').datepicker();

            $(document).ajaxStart(function () {
                $.blockUI({ message: '<h1>Just a moment...</h1>' });
            });

            $(document).ajaxComplete(function () {
                $.unblockUI();
            });
        });
    </script>
    <!-- #endregion -->
    <!-- #region socket.io js script -->
    @if (CheckBlogSocketsAvailability())
    {
        <script src="@GetBlogSocketsJs()" type="text/javascript"></script>
    }
    <!-- #endregion -->
    <!-- #region js plugins -->
    <script src="~/bower_components/blockui/jquery.blockUI.js"></script>
    <script src="~/bower_components/jquery.validation/dist/jquery.validate.js"></script>
    <script src="~/bower_components/Microsoft.jQuery.Unobtrusive.Validation/jquery.validate.unobtrusive.js"></script>
    <script src="~/bower_components/bootstrap/dist/js/bootstrap.js"></script>
    <script src="~/bower_components/bootstrap-datepicker/js/bootstrap-datepicker.js"></script>
    <script src="~/bower_components/bootstrap-material-design/dist/js/ripples.js"></script>
    <script src="~/bower_components/bootstrap-material-design/dist/js/material.js"></script>
    <script src="~/bower_components/momentjs/min/moment-with-locales.js"></script>
    <script src="~/bower_components/respond/dest/respond.src.js"></script>
    <script src="~/wwwroot/lib/blogajax.js"></script>
    <!-- #endregion -->
    @RenderSection("scripts", false)
</body>

</html>

@functions
{
    /// <summary>
    /// Check web.config whether to use material design
    /// </summary>
    /// <returns>Boolean value</returns>
    public bool UseMaterialDesign()
    {
        return Convert.ToBoolean(ConfigurationManager.AppSettings.Get("UseMaterialDesign"));
    }
    
    /// <summary>
    /// Get node js app url path
    /// </summary>
    /// <returns>Node JS application url</returns>
    public string GetBlogSockets()
    {
        var sb = new StringBuilder();
        sb.Append(ConfigurationManager.AppSettings.Get("BlogSockets"));

        return sb.ToString();
    }

    /// <summary>
    /// Get node js app script
    /// </summary>
    /// <returns>Node JS script url</returns>
    public string GetBlogSocketsJs()
    {
        var sb = new StringBuilder();
        sb.Append(ConfigurationManager.AppSettings.Get("BlogSockets"));
        sb.Append("socket.io/socket.io.js");

        return sb.ToString();
    }

    /// <summary>
    /// Checks if Redis service is running
    /// </summary>
    /// <returns>Boolean return that tells if Redis service is running</returns>
    public bool CheckBlogSocketsAvailability()
    {
        try
        {
            using (var redisClient = new RedisClient(
                ConfigurationManager.AppSettings.Get("RedisServer"),
                Convert.ToInt32(ConfigurationManager.AppSettings.Get("RedisPort"))))
            {
                redisClient.Echo(string.Empty);
                return true;
            }
        }
        catch
        {
            return false;
        }
    }
}
